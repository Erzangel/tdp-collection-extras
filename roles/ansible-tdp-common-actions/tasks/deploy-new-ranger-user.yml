---
- name: "Ranger: get user list"
  uri:
    url: "{{ ranger_hdfs_install_properties.POLICY_MGR_URL }}/service/users"
    headers:
      Accept: application/json
    url_username: "{{ ranger_admin_user }}"
    url_password: "{{ ranger_admin_password }}"
    force_basic_auth: yes
    return_content: yes
  register: jsoncontent

- name: Get user id from ranger
  vars:
    jmesquery: "vXPortalUsers[? loginId == '{{ item.username }}'].id"
  set_fact:
    user_id: "{{ jsoncontent.json | community.general.json_query(jmesquery)}}"

- name: Create user in ranger when not exists
  vars:
    create_user:
      {
        "name": "{{ item.username }}",
        "firstName": "{{ item.username }}",
        "loginId": "{{ item.username }}",
        "description": "{{item.username}} user",
        "password": "{{ item.password}}",
        "status": 1,
        "isVisible": 1,
        "userRoleList": ["ROLE_USER"],
        "userSource": 0,
      }
  uri:
    url: "{{ ranger_hdfs_install_properties.POLICY_MGR_URL }}/service/xusers/secure/users"
    headers:
      Accept: application/json
    body: "{{ create_user | to_json }}"
    body_format: json
    url_username: "{{ ranger_admin_user }}"
    url_password: "{{ ranger_admin_password }}"
    force_basic_auth: yes
    method: POST
    return_content: yes
  when: user_id == []
  register: jsoncontent
